* An example of chaining source blocks
1. A named table
#+name: dot-eg-table
| 1 | 2 |
| 1 | 3 |
| 2 | 5 |
| 3 | 5 |
| 5 | 11 |

2. a named source block taking table data and producing dot output
#+name:make-dot
#+BEGIN_SRC emacs-lisp :var table=dot-eg-table :results output :exports none
  (mapcar #'(lambda (x)
              (princ (format "%s [label =\"%s\", shape = \"box\"];\n"
                             (first x) (first x)))
              (princ (format "%s -- %s;\n" (first x) (second x)))) table)
              
#+END_SRC

and this is chained to a dot source code block

3. a source block reading the output of make-dot
#+BEGIN_SRC dot :file test-dot.png :var input=make-dot :exports results
graph {
 $input
}
#+END_SRC

#+RESULTS:
[[file:test-dot.png]]

* An example plantuml file
  In org babel plantuml "code" is living in a SRC block. A :file
  property has to be specified to name a file for the result.
  #+BEGIN_SRC plantuml :file /tmp/plantuml-test.png
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
John --> Alice: another Authentication Request
Alice --> John: another Authentication Response
  #+END_SRC  
  Evaluating the block creates a RESULTS section that contains a link
  to the specified file.
* ob-http

[[http://melpa.org/#/ob-http][file:http://melpa.org/packages/ob-http-badge.svg]]
[[http://stable.melpa.org/#/ob-http][file:http://stable.melpa.org/packages/ob-http-badge.svg]]

http request in org-mode babel, requires curl

#+BEGIN_SRC http :pretty
GET https://api.github.com/repos/zweifisch/ob-http/languages
Accept: application/vnd.github.moondragon+json
#+END_SRC

#+RESULTS:
: {
:   "Emacs Lisp": 15327,
:   "Shell": 139
: }

** setup

To use =ob-http= in an =org-babel= source block, the http language must be enabled in the custom =org-babel-load-languages= alist. Alternatively, running the following snippet during initialization will enable the mode.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (http . t)))
#+END_SRC

** options

| option        | curl           | example                                                                                 |
|---------------+----------------+-----------------------------------------------------------------------------------------|
| =:proxy=      | =-x=           | =:proxy localhost:8118=                                                                 |
| =:noproxy=    | =--noproxy *=  | N/A                                                                                     |
| =:cookie-jar= | =--cookie-jar= | =:cookie-jar username=                                                                  |
| =:cookie=     | =--cookie=     | =:cookie username=                                                                      |
| =:max-time=   | =--max-time=   | default is =10=                                                                         |
| =:user=       | =--user=       | =:user admin:passwd=
| =:pretty=     | N/A            | =:pretty= use =Content-Type=, to overwrite =:pretty json=                               |
| =:select=     | N/A            | =:select path= path will be passed to [[https://stedolan.github.io/jq/][jq]] for json or [[https://github.com/EricChiang/pup][pup]] for html or [[http://xmlstar.sourceforge.net/][xmlstarlet]] for xml |
| =:get-header= | N/A            | =:get-header X-Subject-Token=                                                           |
| =:curl=       | N/A            | =:curl --insecure --compressed= additional arguments for curl                           |
| =:resolve=    | =--resolve=    | =:resolve example.com:80:127.0.0.1,example.com:443:127.0.0.1=                           |

** examples
   
**** set arbitrary header

#+BEGIN_SRC http :pretty
GET http://httpbin.org/user-agent
User-Agent: ob-http
#+END_SRC

#+RESULTS:
: {
:   "user-agent": "ob-http"
: }

**** json

#+BEGIN_SRC http :pretty
POST http://httpbin.org/post
Content-Type: application/json

{
  "key": "value"
}
#+END_SRC

**** form submit

#+BEGIN_SRC http :pretty
PATCH http://httpbin.org/patch

key=value&foo=value
#+END_SRC

**** variable
     
#+HEADER: :var name="ob-http"
#+HEADER: :var password="secret"
#+BEGIN_SRC http :select .json
POST http://httpbin.org/post
Content-Type: application/json

{
    "auth": {
        "name": "${name}",
        "password": "${password}"
    }
}
#+END_SRC

#+RESULTS:
#+begin_example
{
  "args": {}, 
  "data": "", 
  "files": {}, 
  "form": {}, 
  "headers": {
    "Accept": "*/*", 
    "Connection": "close", 
    "Content-Length": "0", 
    "Content-Type": "application/json", 
    "Host": "httpbin.org", 
    "User-Agent": "curl/7.59.0"
  }, 
  "json": null, 
  "origin": "154.125.241.100", 
  "url": "http://httpbin.org/post"
}
#+end_example

**** use properties

supported headers:

- pretty
- proxy
- noproxy
- cookie
- schema
- host
- port
- user
- max-time

 * api test
 :PROPERTIES:
 :header-args: :var token="secret" :host httpbin.org :pretty
 :END:
 
#+BEGIN_SRC http
ST /post
ntent-Type: application/json
Auth-Token: ${token}
#+END_SRC

#+RESULTS:
#+begin_example
{
  "url": "http://httpbin.org/post",
  "json": null,
  "headers": {
    "X-Auth-Token": "secret",
    "User-Agent": "curl/7.35.0",
    "Host": "httpbin.org",
    "Content-Type": "application/json",
    "Accept": "*/*"
  },
  "form": {},
  "files": {},
  "data": "",
  "args": {}
}
#+end_example

** files

#+BEGIN_SRC http :file zweifisch.jpeg
GET https://avatars.githubusercontent.com/u/447862?v=3
#+END_SRC

#+RESULTS:
[[file:zweifisch.jpeg]]



* Python matplotlib
** Example 1
   - Inline the result image into emacs buffer
   - Using (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
     to instantly 
 #+BEGIN_SRC python :results file
 import matplotlib, numpy
 matplotlib.use('Agg')
 import matplotlib.pyplot as plt
 fig=plt.figure(figsize=(4,2))
 x=numpy.linspace(-15,15)
 plt.plot(numpy.sin(x)/x)
 fig.tight_layout()
 plt.savefig('c:/temp/python-matplot-fig.png')
 return 'c:/temp/python-matplot-fig.png' # return filename to org-mode
 #+END_SRC

 #+RESULTS:
 [[file:c:/temp/python-matplot-fig.png]]

** Example 2
   - Using matplotlib show() function to inspect the results.
   - Not that emacs is waiting for matplotlib to return
      
 #+BEGIN_SRC python
 import matplotlib.pyplot as plt
 import numpy as np

 t = np.arange(0.0, 2.0, 0.01)
 s = 1 + np.sin(2*np.pi*t)
 plt.plot(t, s)

 plt.xlabel('time (s)')
 plt.ylabel('voltage (mV)')
 plt.title('About as simple as it gets, folks')
 plt.grid(True)
 plt.savefig("test.png")
 plt.show()
 #+END_SRC  

 #+RESULTS:
 : None

** Example 3 Barplot
 #+BEGIN_SRC python
 import matplotlib.pyplot as plt
 plt.rcdefaults()
 import numpy as np
 import matplotlib.pyplot as plt


 plt.rcdefaults()
 fig, ax = plt.subplots()

 # Example data
 people = ('Tom', 'Dick', 'Harry', 'Slim', 'Jim')
 y_pos = np.arange(len(people))
 performance = 3 + 10 * np.random.rand(len(people))
 error = np.random.rand(len(people))

 ax.barh(y_pos, performance, xerr=error, align='center',
         color='green', ecolor='black')
 ax.set_yticks(y_pos)
 ax.set_yticklabels(people)
 ax.invert_yaxis()  # labels read top-to-bottom
 ax.set_xlabel('Performance')
 ax.set_title('How fast do you want to go today?')

 plt.show()
 #+END_SRC  

 #+RESULTS:
 : None

** Example 4 Histogram
 #+BEGIN_SRC python :results file
 """
 ===========================
 Frontpage histogram example
 ===========================

 This example reproduces the frontpage histogram example.
 """

 import matplotlib.pyplot as plt
 import numpy as np


 random_state = np.random.RandomState(19680801)
 X = random_state.randn(10000)

 fig, ax = plt.subplots()
 ax.hist(X, bins=25, normed=True)
 x = np.linspace(-5, 5, 1000)
 ax.plot(x, 1 / np.sqrt(2*np.pi) * np.exp(-(x**2)/2), linewidth=4)
 ax.set_xticks([])
 ax.set_yticks([])
 fig.savefig("c:/temp/histogram_frontpage.png", dpi=25)  # results in 160x120 px image
 return "c:/temp/histogram_frontpage.png"

 #+END_SRC  

 #+RESULTS:
 [[file:c:/temp/histogram_frontpage.png]]
