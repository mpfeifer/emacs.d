* An example of chaining source blocks
1. A named table
#+name: dot-eg-table
| 1 | 2 |
| 1 | 3 |
| 2 | 5 |
| 3 | 5 |
| 5 | 11 |

2. a named source block taking table data and producing dot output
#+name:make-dot
#+BEGIN_SRC emacs-lisp :var table=dot-eg-table :results output :exports none
  (mapcar #'(lambda (x)
              (princ (format "%s [label =\"%s\", shape = \"box\"];\n"
                             (first x) (first x)))
              (princ (format "%s -- %s;\n" (first x) (second x)))) table)
              
#+END_SRC

and this is chained to a dot source code block

3. a source block reading the output of make-dot
#+BEGIN_SRC dot :file test-dot.png :var input=make-dot :exports results
graph {
 $input
}
#+END_SRC

#+RESULTS:
[[file:test-dot.png]]

* An example plantuml file
  In org babel plantuml "code" is living in a SRC block. A :file
  property has to be specified to name a file for the result.
  #+BEGIN_SRC plantuml :file /tmp/plantuml-test.png
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
John --> Alice: another Authentication Request
Alice --> John: another Authentication Response
  #+END_SRC  
  Evaluating the block creates a RESULTS section that contains a link
  to the specified file.
